name: Pull Request Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]

jobs:
  # Validate PR title and content
  validate-pr:
    name: Validate PR
    runs-on: ubuntu-latest

    steps:
      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            fix
            feat
            docs
            style
            refactor
            test
            chore
            build
            ci
          requireScope: false

      - name: Check PR size
        uses: pascalgn/size-label-action@v0.4.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          sizes: >
            {
              "0": "XS",
              "20": "S",
              "50": "M", 
              "200": "L",
              "800": "XL",
              "2000": "XXL"
            }

  # Run quick validation checks
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check for merge conflicts
        run: |
          git merge-tree $(git merge-base HEAD main) HEAD main | grep -q "<<<<<<< " && exit 1 || exit 0

      - name: Check package.json changes
        run: |
          if git diff --name-only origin/main...HEAD | grep -q "package.json"; then
            echo "📦 package.json has been modified"
            git diff origin/main...HEAD package.json
          fi

      - name: Check for TODO/FIXME comments
        run: |
          if grep -r "TODO\|FIXME" src/ --exclude-dir=node_modules; then
            echo "⚠️ Found TODO/FIXME comments in the code"
          fi

      - name: Validate file structure
        run: |
          # Check if all test files have corresponding source files
          find src -name "*.test.tsx" -o -name "*.test.ts" | while read test_file; do
            source_file=${test_file/.test/}
            if [ ! -f "$source_file" ]; then
              echo "❌ Test file $test_file has no corresponding source file"
              exit 1
            fi
          done

  # Comment on PR with useful information
  pr-comment:
    name: PR Comment
    runs-on: ubuntu-latest
    needs: [validate-pr, quick-checks]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate build analysis
        run: |
          npm run build
          echo "Build completed successfully"

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Get PR info
            const { context } = require('@actions/github');
            const prNumber = context.payload.pull_request.number;

            // Create comment body
            let commentBody = `## 🚀 Pull Request Analysis\n\n`;
            commentBody += `### ✅ Validation Status\n`;
            commentBody += `- PR Title: ${{ needs.validate-pr.result == 'success' && '✅ Valid' || '❌ Invalid' }}\n`;
            commentBody += `- Quick Checks: ${{ needs.quick-checks.result == 'success' && '✅ Passed' || '❌ Failed' }}\n\n`;

            commentBody += `### 📊 Changes Summary\n`;
            commentBody += `- Files changed: ${{ github.event.pull_request.changed_files }}\n`;
            commentBody += `- Lines added: +${{ github.event.pull_request.additions }}\n`;
            commentBody += `- Lines deleted: -${{ github.event.pull_request.deletions }}\n\n`;

            commentBody += `### 🔍 Next Steps\n`;
            commentBody += `1. Wait for CI checks to complete\n`;
            commentBody += `2. Request review from team members\n`;
            commentBody += `3. Address any feedback\n`;
            commentBody += `4. Merge when approved\n\n`;

            commentBody += `---\n*This comment was automatically generated by GitHub Actions*`;

            // Post comment
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
